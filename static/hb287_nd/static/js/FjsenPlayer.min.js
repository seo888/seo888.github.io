
(function(){
	var _log = function(s){
		try{
			if(fjsenPlayerSeeting && 'log' in fjsenPlayerSeeting && typeof fjsenPlayerSeeting.log == 'function') fjsenPlayerSeeting.log(s);
			else if(console) console.log(s);
		}catch(e){}
	}
	if('fjsenPlayerVersion' in window) return _log('重复加载');
	window.fjsenPlayerVersion = 'v21';
	if(typeof window.jQuery == 'undefined') return _log('必须先加载 jQuery.js');
	var $ = window.jQuery
	, $body = ''
	, index = 0
	, list  = []
	, data  = {
		auto       : 0
		,bg        : 'virtual'
		,barHide   : 2000
		,barTimer  : 0
		,barVTimer : 0
		,barQTimer : 0
		,barBottom : 0
		,barHeight : 30
		,prHeight  : 6
		,prDotSize : 10
		,context   : 0
		,contextX  : 0
		,controls  : 1
		,events    : {}
		,binEvents : {}
		,ele       : {}
		,error     : '当前视频播放资源不可用!'
		,height    : 0
		,id        : ''
		,inVShow   : 0
		,inQShow   : 0
		,isFull    : 0
		,isCreate  : 0
		,isEvent   : 1
		,canFull   : 1
		,windDrag  : 1
		,fullTime  : 0
		,landscape : 0
		,live      : 0
		,listStr   : ''
		,list      : []
		,loaded    : 0
		,oldVolume : 1
		,viTimer   : 0
		,virtual   : 1
		,mastTimer : 0
		,media     : null
		,mime      : ''
		,msg       : ''
		,menuTimer : 0
		,objectFit : 'contain'
		,poster    : ''
		,playing   : 0
		,preload   : 0
		,prTimer   : 0
		,quality   : 1
		,qualityHi : 0
		,src       : ''
		,scale     : 16/9
		,type      : ''
		,width     : '100%'
		,timePdNum : 0
		,videoControls    : 0
		,notFullLandscape : 0
		,lastQualityBarLi : false
	}, quality = {
		'0'        : '自动'
		,'307200'  : '流畅'
		,'819200'  : '标清'
		,'1228800' : '普清'
		,'1536000' : '高清'
		,'2048000' : '原画'
	}, dragData = {
		start   : {x : 0, y : 0, time : 0}
		, move  : {x : 0, y : 0, time : 0}
		, end   : {x : 0, y : 0, time : 0}
		, timer : 0, num : 0, darg : 0, xy : ''
	}, mime = {
		m3u8 : 'application/vnd.apple.mpegurl'
		, mp3 : 'audio/mpeg'
		, mp4 : 'video/mp4'
		, flv : 'video/x-flv'
	}, fjsenPlayerSeeting = {
		loop        : 0
		, same      : 0
		, pre       : 'fjsen-player'
		, tapMs     : 300
		, p2p       : 0
		, path      : ''
		, fullPage  : 1
	}, UA  = navigator.userAgent
	, isIE = UA.match(/MSIE/i) ? 1 : 0
	, isWX = UA.match(/MicroMessenger/i) ? 1 : 0
	, isX5 = UA.match(/TBS\//i) ? 1 : 0
	, isTouch = 'ontouchstart' in window ? 1 : 0
	, hls   = 0
	, hlsJs = 'hls.js'
	, flash = 0
	, mastTimer = 0
	, cacheSrc = []
	, cacheStr = [];
			
	var _init = function(){
		if('fjsenPlayerSeeting' in window) fjsenPlayerSeeting = $.extend(true, fjsenPlayerSeeting, window.fjsenPlayerSeeting);
		$('script').each(function(){
			var src = $(this).prop('src');
			if(src && src.match(/\/FjsenPlayer(\.min|)\.js/i)){
				fjsenPlayerSeeting.path = src.replace(/\/FjsenPlayer(\.min|)\.js($|\?[\S\s]*?$)/, '/');
				return false;
			}
		});
		$('head').append('<link rel="stylesheet" type="text/css" href="' + fjsenPlayerSeeting.path + 'FjsenPlayer.css" />');
		$body = $('body');
		if(fjsenPlayerSeeting.p2p) hlsJs = 'hls-p2p.js';
		$player = $('.' + fjsenPlayerSeeting.pre);
		if($body.length == 0){
			return _log('FjsenPlayer.js 放在播放器后面');
		}
		$player.each(function(){
			_FjsenPlayer($(this), {});
		});
		var resize = 'onorientationchange' in window ? 'onorientationchange' : 'resize';
		$(window).on(resize, function(){
			setTimeout(function(){
				var is_Full = document.fullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || false;
				for(var i = 0; i < list.length; i++){
					var OTHER = list[i];
					if(!isTouch && !is_Full && OTHER.isFull) _fullscreen(OTHER);
					if(OTHER.landscape && 'orientation' in window && OTHER.isFull){
						if(Math.abs(window.orientation)%180 == 0){
							_landscape(OTHER, 1);
						}else _landscape(OTHER);
					}
				}
			}, 30);
		})
		if(isWX) $(document).on('WeixinJSBridgeReady', _weixinAutoPlay);
	}, _ajax = function(src, type, cache, async, success, error){
		if(cache){
			for(var i = 0; i < cacheSrc.length; i++){
				if(cacheSrc[i] == src){
					if(typeof success == 'function') success(cacheStr[i]);
					return ;
				}
			}
		}
		$.ajax({
			dataType  : type
			, cache   : cache
			, async   : async
			, url     : src
			, success : function(str){
				if(typeof str == 'undefined') str = '';
				if(cache){
					cacheSrc.push(src);
					cacheStr.push(str);
				}
				if(typeof success == 'function') success(str);
			}
			, error : function(){
				if(typeof error == 'function') error();
			}
		});
	}, _ele = function(tagName, className){
		var ele = $('<' + tagName + ' />')
		if(className) _toggleClass(ele, className, 1);
		return ele;
	}, _class = function(className){
		if(!className) return '';
		if(className.toString().indexOf(fjsenPlayerSeeting.pre) > -1) return className;
		return fjsenPlayerSeeting.pre + '-' + className;
	}, _toggleClass = function(ele, className, addRemove){
		className = _class(className);
		if(addRemove == 1 || !ele.is('.' + className)) ele.addClass(className);
		else if(addRemove == 0 || ele.is('.' + className)) ele.removeClass(className);
	}, _trigger = function(PLAYER, eventName, drag){
		_log(eventName);
		for(var i in PLAYER.binEvents){
			if(i == eventName){
				PLAYER.binEvents[i](PLAYER, drag);
			}
		}
		for(var i in PLAYER.events){
			if(i == eventName){
				PLAYER.events[i](PLAYER, drag);
			}
		}
	}, _bind = function(PLAYER, eventName, execute){		
		PLAYER.binEvents[eventName] = execute;		
	}, _create = function(PLAYER){
		PLAYER.ele.screen     = _ele('div', 'screen');
		PLAYER.ele.wrap       = _ele('div', 'wrap');
		PLAYER.ele.bg         = _ele('div', 'bg');
		PLAYER.ele.video      = _ele('div', 'video');
		PLAYER.ele.play       = _ele('div', 'play');
		PLAYER.ele.msg        = _ele('div', 'msg');
		PLAYER.ele.wind       = _ele('div', 'wind');
		PLAYER.ele.barBg      = _ele('div', 'bar-bg');
		PLAYER.ele.bar        = _ele('div', 'bar');
		PLAYER.ele.playing    = _ele('div', 'playing');
		PLAYER.ele.playTime   = _ele('div', 'playtime');
		PLAYER.ele.maxTime    = _ele('div', 'maxtime');
		PLAYER.ele.fullscreen = _ele('div', 'fullscreen');
		PLAYER.ele.volume     = _ele('div', 'volume');
		PLAYER.ele.volumeBar  = _ele('div', 'volume-bar');
		PLAYER.ele.volumePos  = _ele('div', 'volume-pos');
		PLAYER.ele.volumeBg   = _ele('div', 'volume-bg');
		PLAYER.ele.volumeTiao = _ele('div', 'volume-tiao');
		PLAYER.ele.volumeVal  = _ele('div', 'volume-val');
		PLAYER.ele.volumeDian = _ele('div', 'volume-dian');
		PLAYER.ele.volumeTmd  = _ele('div', 'volume-tmd');
		PLAYER.ele.quality    = _ele('div', 'quality');
		PLAYER.ele.qualityBar = _ele('div', 'quality-bar');
		PLAYER.ele.logo       = _ele('div', 'logo');
		PLAYER.ele.menu       = _ele('div', 'contextmenu');
		PLAYER.ele.menuPos    = _ele('div', 'contextmenu-pos');
		PLAYER.ele.menuBg     = _ele('div', 'contextmenu-bg');
		PLAYER.ele.menuBar    = _ele('div', 'contextmenu-bar');
		PLAYER.ele.prBg       = _ele('div', 'pr-bg');
		PLAYER.ele.prLoad     = _ele('div', 'pr-load');
		PLAYER.ele.prGoto     = _ele('div', 'pr-goto');
		PLAYER.ele.prTime     = _ele('div', 'pr-time');
		PLAYER.ele.prPlay     = _ele('div', 'pr-play');
		PLAYER.ele.prDian     = _ele('div', 'pr-dian');
		PLAYER.ele.prBar      = _ele('div', 'pr-bar');
		PLAYER.ele.media      = _ele('video', 'media');
		if(PLAYER.bg == 'virtual'){
			PLAYER.ele.virtual = _ele('div', 'virtual');
			PLAYER.ele.canvas  = _ele('canvas', 'canvas');
			PLAYER.ele.wrap.append(PLAYER.ele.virtual);
			PLAYER.ele.bg.append(PLAYER.ele.canvas);
		}else{
			if(PLAYER.bg) PLAYER.ele.bg.css({background : PLAYER.bg});
		}
		
		_log(UA);
		/*
		PLAYER.ele.media.attr({
			'x-webkit-airplay' : 'allow'
			,'x5-video-player-type' : 'h5'
			,'x5-video-player-fullscreen' : 'true'
			,'x5-playsinline' : 'true'
			,'webkit-playsinline' : 'true'
			,'playsinline' : 'true'
			,'type' : PLAYER.mime
		}).css({objectFit : PLAYER.objectFit});
		*/
		PLAYER.ele.media.attr({
			'x-webkit-airplay' : true
			,'x5-playsinline' : 'isiPhoneShowPlaysinline'
			,'playsinline' : 'isiPhoneShowPlaysinline'
			,'webkit-playsinline' : 'isiPhoneShowPlaysinline'
		}).css({objectFit : PLAYER.objectFit});
		if(fjsenPlayerSeeting.loop == 1){
			PLAYER.ele.media.attr('loop', 'loop');
		}
		if(PLAYER.videoControls == 1){
			PLAYER.ele.media.attr('controls', 'controls');
			PLAYER.ele.wind.hide();
		}else{
			PLAYER.ele.video.addClass('fjsen-player-video-not-controls');
		}
		PLAYER.ele.video.append(PLAYER.ele.media);
		PLAYER.ele.wrap.attr('id', PLAYER.id);
		if(isTouch) _toggleClass(PLAYER.ele.wrap, 'wap', 1);
		PLAYER.ele.playTime.html('00:00');
		if(PLAYER.live) PLAYER.ele.maxTime.html('LIVE');
		else PLAYER.ele.maxTime.html('00:00');
		PLAYER.ele.prTime.html('00:00');
		PLAYER.ele.volumeVal.append(PLAYER.ele.volumeDian);
		PLAYER.ele.volumePos.append(PLAYER.ele.volumeBg).append(PLAYER.ele.volumeTiao).append(PLAYER.ele.volumeVal).append(PLAYER.ele.volumeTmd);
		PLAYER.ele.volumeBar.append(PLAYER.ele.volumePos);
		PLAYER.ele.menuPos.append(PLAYER.ele.menuBg).append(PLAYER.ele.menuBar);
		PLAYER.ele.menu.append(PLAYER.ele.menuPos);
		PLAYER.ele.prGoto.append(PLAYER.ele.prTime);
		PLAYER.ele.prPlay.append(PLAYER.ele.prDian);
		PLAYER.ele.bar.append(PLAYER.ele.playing).append(PLAYER.ele.playTime).append(PLAYER.ele.maxTime).append(PLAYER.ele.fullscreen).append(PLAYER.ele.volume).append(PLAYER.ele.quality).append(PLAYER.ele.logo);
		PLAYER.ele.wrap.append(PLAYER.ele.bg).append(PLAYER.ele.video).append(PLAYER.ele.play).append(PLAYER.ele.msg).append(PLAYER.ele.wind).append(PLAYER.ele.barBg).append(PLAYER.ele.bar).append(PLAYER.ele.prBg).append(PLAYER.ele.prLoad).append(PLAYER.ele.prGoto).append(PLAYER.ele.prPlay).append(PLAYER.ele.prBar).append(PLAYER.ele.volumeBar).append(PLAYER.ele.qualityBar).append(PLAYER.ele.menu);
		PLAYER.ele.screen.html(PLAYER.ele.wrap);
		PLAYER.ele.ele.html(PLAYER.ele.screen);
		var contextmenu = [{text : 'fjsenPlayer ' + window.fjsenPlayerVersion
			, data : ''
		}, {text : '原始'
			,data : 'objectFit:contain'
		}, {text : '铺满'
			,data : 'objectFit:cover'
		}, {text : '拉伸'
			,data : 'objectFit:fill'
		}];
		PLAYER.ele.menu.css({height : contextmenu.length * 30 + 20});
		for(var i = 0; i < contextmenu.length; i++){
			var li = _ele('div', 'contextmenu-li');
			li.html(contextmenu[i].text).data('contextmenu', contextmenu[i].data);
			PLAYER.ele.menuBar.append(li);
		}
		/*
		,barBottom : 0
		,barHeight : 30
		,prHeight  : 6
		,prDotSize : 10
		if(PLAYER.barBottom !== 0){
			PLAYER.ele.barBg.css({bottom : PLAYER.barBottom + 'px'});
			PLAYER.ele.bar.css({bottom : PLAYER.barBottom + 'px'});
			PLAYER.ele.prBg.css({bottom : PLAYER.barHeight + PLAYER.barBottom + 'px'});
			PLAYER.ele.prLoad.css({bottom : PLAYER.barHeight + PLAYER.barBottom + 'px'});
			PLAYER.ele.prGoto.css({bottom : PLAYER.barHeight + PLAYER.barBottom + 'px'});
			PLAYER.ele.prPlay.css({bottom : PLAYER.barHeight + PLAYER.barBottom + 'px'});
			PLAYER.ele.prBar.css({bottom : PLAYER.barHeight - (PLAYER.prDotSize - PLAYER.prHeight)/2 + PLAYER.barBottom + 'px'});
			PLAYER.ele.volumeBar.css({bottom : PLAYER.barHeight + PLAYER.barBottom + 'px'});
			PLAYER.ele.qualityBar.css({bottom : PLAYER.barHeight - 3 + 'px'});
		}
		*/
		_trigger(PLAYER, 'create');
		_action(PLAYER);
		_size(PLAYER);
		_barShow(PLAYER);
		_trigger(PLAYER, 'create-end');
	}, _eXY = function(e, xy){
		if(isTouch && 'originalEvent' in e && e.originalEvent.changedTouches.length > 0){
			return e.originalEvent.changedTouches[0]['client' + xy];
		}
		return 'offset' + xy in e ? e['offset' + xy] : 0;
	}, _dragEvent = function(drag, name, e){
		drag[name] = {
			time : (new Date()).getTime()
			, x : _eXY(e, 'X')
			, y : _eXY(e, 'Y')
		};
	}, _touchAction = function(PLAYER, name, eventList){
		var drag = $.extend(true, {}, dragData);
		var ele = PLAYER.ele[name];
		ele.on('touchstart', function(e){
			drag.darg = 1;
			drag.xy   = '';
			_dragEvent(drag, 'start', e);
			if(drag.start.time - drag.end.time > fjsenPlayerSeeting.tapMs) drag.num = 0;
			_trigger(PLAYER, name + '-touchstart', drag);
			try{e.preventDefault();}catch(ex){}
		})
		ele.on('touchmove', function(e){
			if(drag.darg){
				_dragEvent(drag, 'move', e);
				var x = Math.abs(drag.move.x - drag.start.x);
				var y = Math.abs(drag.move.y - drag.start.y);
				if(drag.xy == ''){
					if(x > 30 || y > 30) drag.xy = y > x ? 'y' : 'x';
				}
				if(drag.xy != '') _trigger(PLAYER, name + '-move-' + drag.xy, drag);
				try{e.preventDefault();}catch(ex){}
			}
		})
		ele.on('touchend', function(e){
			if(drag.darg){
				drag.darg = 0;
				_dragEvent(drag, 'end', e);
				if(drag.end.time - drag.start.time < fjsenPlayerSeeting.tapMs){
					clearTimeout(drag.timer);
					if(drag.num == 0){
						drag.num = 1;
						drag.timer = setTimeout(function(){
							var click_child = 0;
							if(eventList && typeof eventList == 'object'){
								for(var i = 0; i < eventList.length; i++){
									var eventName = eventList[i]
									if(typeof eventName == 'object' && eventName[0] == 'click'){
										click_child = 1;
										if($(e.target).is('.' + _class(eventName[1]))){
											PLAYER.event_ele = $(e.target);
											_trigger(PLAYER, name + '-click', drag);
										}
									}
								}
							}
							if(!click_child) _trigger(PLAYER, name + '-click', drag);
						}, fjsenPlayerSeeting.tapMs + 100);
					}else{
						drag.num = 0
						_trigger(PLAYER, name + '-dblclick', drag);
					}
				}else{
					if(drag.xy != '') _trigger(PLAYER, name + '-drag-' + drag.xy, drag);
				}
				try{e.preventDefault();}catch(ex){}
			}
		})
	}, _pcAction = function(PLAYER, name, eventList){
		eventList = eventList || ['click'];
		var drag = $.extend(true, {}, dragData);
		var ele = PLAYER.ele[name];
		for(var i = 0; i < eventList.length; i++){
			var eventName = eventList[i], 
				proxyName = (typeof eventName == 'object') ? eventName[1] : false,
				eventName = (typeof eventName == 'object') ? eventName[0] : eventName,
				isProxy   = (typeof proxyName == 'string') ? 1 : 0,
				isPreDef  = (proxyName == 1) ? 1 : 0,
				func = function(e){
					var ele = $(this), eventName = e.type, isPreDef = ele.data('isPD' + eventName);
					PLAYER.event_ele = ele;
					if(e.type == 'mouseover') _dragEvent(drag, 'start', e);
					if(e.type == 'mousemove') _dragEvent(drag, 'move', e);
					if(e.type == 'contextmenu') _dragEvent(drag, 'start', e);
					if(e.type == 'click') _dragEvent(drag, 'end', e);
					_trigger(PLAYER, name + '-' + eventName, drag);										
					if(isPreDef){
						try{e.preventDefault();}catch(ex){}
						return false;
					}
				};
			ele.data('isPD' + eventName, isPreDef);
			if(isProxy) ele.on(eventName, '.' + _class(proxyName), func);
			else ele.on(eventName, func);
		}
	}, _action = function(PLAYER){
		if(PLAYER.isEvent){
			if(isTouch){
				_touchAction(PLAYER, 'wind');
				_touchAction(PLAYER, 'playing');
				_touchAction(PLAYER, 'fullscreen');
				_touchAction(PLAYER, 'volume');
				_touchAction(PLAYER, 'qualityBar', [['click', 'quality-li']]);
				_touchAction(PLAYER, 'quality');
			}else{
				_pcAction(PLAYER, 'wrap', ['mouseover', 'mouseout', 'click', ['contextmenu', 1]]);
				_pcAction(PLAYER, 'wind', ['click', 'dblclick', ['contextmenu', 1]]);
				_pcAction(PLAYER, 'playing');
				_pcAction(PLAYER, 'fullscreen');
				_pcAction(PLAYER, 'quality', ['click', 'mouseover', 'mouseout']);
				_pcAction(PLAYER, 'qualityBar', [['click', 'quality-li'], 'mouseover', 'mouseout']);
				_pcAction(PLAYER, 'menuBar', [['click', 'contextmenu-li']]);
				_pcAction(PLAYER, 'volume', ['click', 'mouseover', 'mouseout']);
				_pcAction(PLAYER, 'volumeTmd', ['click', 'mouseover', 'mouseout']);
				if(!PLAYER.live) _pcAction(PLAYER, 'prBar', ['mouseover', 'mouseout', 'mousemove', 'click']);
			}
			_trigger(PLAYER, 'action');
		}
	}, _mast = function(PLAYER, condition, execute, only, num){
		num = num || 1;
		if(only && PLAYER.mastTimer) clearTimeout(PLAYER.mastTimer);
		if(condition(PLAYER)) execute(PLAYER);
		else if(num < 100) PLAYER.mastTimer = setTimeout(function(){
			num++
			_mast(PLAYER, condition, execute, only, num);
		}, 33);
	}, _play = function(PLAYER){
		PLAYER.auto = 0;
		_preload(PLAYER);
		_mast(PLAYER, function(){
			return PLAYER.loaded && PLAYER.media;
		}, function(){
			if(!fjsenPlayerSeeting.same && list.length > 1){
				for(var i = 0; i < list.length; i++){
					var OTHER = list[i];
					if(OTHER.id != PLAYER.id && OTHER.media && OTHER.loaded && OTHER.playing) _pause(OTHER);
				}
			}
			var pps = PLAYER.media.play();
			if('' + pps == '[object Promise]' && ('then' in pps) && ('catch' in pps)){
				eval("pps.then(function(){" +
					"PLAYER.playing = 1;" +
					"_trigger(PLAYER, 'play');" +
				"}).catch(function(e){" +
					"PLAYER.playing = 0;" +
					"_trigger(PLAYER, 'play-not-auto');" +
				"});");
			}else{
				PLAYER.playing = 1;
				_trigger(PLAYER, 'play');
			}
		}, 1)
	}, _pause = function(PLAYER){
		_mast(PLAYER, function(){
			return PLAYER.loaded && PLAYER.media;
		}, function(){
			PLAYER.media.pause();
			PLAYER.playing = 0;
			_trigger(PLAYER, 'pause');
		}, 1)
	}, _toggle = function(PLAYER){
		if(PLAYER.playing) _pause(PLAYER);
		else _play(PLAYER);
	}, _timeStr = function(time){
		var str = '';
		time = Math.floor(time);
		if(time >= 3600) str = Math.floor(time / 3600) + ':';
		time = time % 3600;
		var minute = Math.floor(time / 60);
		if(minute < 10)  str += '0';
		str += minute + ':';
		time = time % 60;
		if(time < 10) str += '0';
		str += time;
		return str;
	}, _canvas = function(PLAYER){
		if(PLAYER.viTimer) clearTimeout(PLAYER.viTimer);
		_trigger(PLAYER, 'canvas');
		if(PLAYER.playing && !PLAYER.media.ended){
			PLAYER.viTimer = setTimeout(function(){
				_canvas(PLAYER);
			}, 1000/60);
		}
	}, _progress = function(PLAYER){
		if(PLAYER.prTimer) clearTimeout(PLAYER.prTimer);
		PLAYER.lastCurrentTime = PLAYER.currentTime;
		PLAYER.currentTime     = parseInt(PLAYER.media.currentTime) || 0;
		PLAYER.duration        = PLAYER.live ? 0 : (parseInt(PLAYER.media.duration) || 0);
		_trigger(PLAYER, 'progress');
		if(PLAYER.playing && !PLAYER.media.ended){
			if(PLAYER.lastCurrentTime == PLAYER.currentTime){
				PLAYER.timePdNum++;
			}else{
				PLAYER.timePdNum = 0;
			}
			if(PLAYER.timePdNum > 5){
				PLAYER.timePdNum = 0;
				_lowList(PLAYER);
			}
			PLAYER.prTimer = setTimeout(function(){
				_progress(PLAYER);
			}, 500);
		}else{
			PLAYER.playing = 0;
			_trigger(PLAYER, 'ended');
			_trigger(PLAYER, 'pause');
			if(fjsenPlayerSeeting.loop == 2){
				var next = 0;
				for(var i = 0; i < list.length; i++){
					var OTHER = list[i];
					if(OTHER.id == PLAYER.id) next = 1;
					else if(next == 1){
						next = 2;
						OTHER.auto = 0;
						_trigger(PLAYER, 'loop');
						_preload(OTHER);
						_play(OTHER);
						break;
					}
				}
				if(next == 1){
					var OTHER = list[0];
					OTHER.auto = 0;
					_trigger(PLAYER, 'loop');
					_preload(OTHER);
					_play(OTHER);
				}
			}
		}
	}, _setTime = function(PLAYER, time){
		if(PLAYER.loaded){
			PLAYER.currentTime       = time;
			PLAYER.media.currentTime = time;
			_trigger(PLAYER, 'progress');
			_trigger(PLAYER, 'canvas');
		}
	}, _load = function(PLAYER, loadCallback){
		_trigger(PLAYER, 'load');
		if(PLAYER.type == 'hls') _loadHls(PLAYER);
		else _loadVideo(PLAYER);
		_mast(PLAYER, function(){
			return PLAYER.loaded;
		}, function(){
			_trigger(PLAYER, 'loaded');
			if(typeof loadCallback == 'function') loadCallback(PLAYER);
		});
	}, _loadHls = function(PLAYER){
		_trigger(PLAYER, 'load-hls');
		PLAYER.loaded = 0;
		_showMsg(PLAYER, '正在加载视频内容');
		if(fjsenPlayerSeeting.p2p){
			var p2pConfig = {
				maxBufferSize : 2*1000*1000
			};
			if(PLAYER.live){
				p2pConfig = {
					maxBufferSize : 2*1000*1000
					, maxBufferLength : 5
					,liveSyncDuration : 30
				};
			}
			PLAYER.vm = new Hls({p2pConfig : p2pConfig});
		}else PLAYER.vm = new Hls();
				
		PLAYER.vm.loadSource(PLAYER.src);
		PLAYER.vm.attachMedia(PLAYER.media);
		PLAYER.vm.on(Hls.Events.MANIFEST_PARSED, function(){
			PLAYER.loaded = 1;
			_hideMsg(PLAYER);
		});
	}, _loadVideo = function(PLAYER){
		_trigger(PLAYER, 'load-video');
		PLAYER.loaded = 0;
		PLAYER.media.src = PLAYER.src;
		PLAYER.media.load();
		_showMsg(PLAYER, '正在加载视频内容');
		PLAYER.ele.media.off().on('canplay', function() {
			PLAYER.loaded = 1;
			_hideMsg(PLAYER);
		}).on('error', function() {
			_trigger(PLAYER, 'error');
		})
	}, _flash = function(PLAYER){
		PLAYER.loaded = 1;
		if(PLAYER.isCreate) return ;
		PLAYER.isCreate = 1;
		PLAYER.src = fjsenPlayerSeeting.path + 'flash.html?src=' + encodeURIComponent(PLAYER.src) + '&auto=' + PLAYER.auto + '&live='  + PLAYER.live
		_trigger(PLAYER, 'flash');
		_trigger(PLAYER, 'iframe');
	}, _video = function(PLAYER){
		if(PLAYER.isCreate) return ;
		PLAYER.isCreate = 1;
		
		PLAYER.media = PLAYER.ele.media[0];
		PLAYER.media.type = PLAYER.mime;
		_trigger(PLAYER, 'video');
	}, _preload = function(PLAYER){
		if(!PLAYER.loaded){
			_trigger(PLAYER, 'before-preload');
			if(PLAYER.type == 'flash') _flash(PLAYER);
			else{
				_video(PLAYER);
				if(PLAYER.quality && PLAYER.mime == mime.m3u8){
					_playList(PLAYER);
					if(!PLAYER.qualityHi) _loadAndPlay(PLAYER);
				}else _loadAndPlay(PLAYER);
			}
			_trigger(PLAYER, 'preload');
		}
	}, _loadAndPlay = function(PLAYER){
		_load(PLAYER, function(PLAYER){
			if(PLAYER.auto){
				if(!fjsenPlayerSeeting.same && list.length > 1){
					for(var i = 0; i < list.length; i++){
						var OTHER = list[i];
						if(OTHER.id == PLAYER.id) break;
						if(OTHER.id != PLAYER.id && OTHER.auto) return ;
					}
				}
				_play(PLAYER);
			}
		});
	}, _playList = function(PLAYER){
		if(PLAYER.isCreate == 2) return ;
		PLAYER.isCreate = 2;
		if(PLAYER.listStr) _playListParse(PLAYER);
		else{
			_ajax(PLAYER.src, 'html', true, false, function(str){
				PLAYER.listStr = str;
				_playListParse(PLAYER);
			}, function(){
				_trigger(PLAYER, 'error');
			})
		}
		
	}, _playListParse = function(PLAYER){
		var max_li  = {src : PLAYER.src, quality : '0'}, path  = PLAYER.src.replace(/\/[^\/]+?.m3u8($|\?[\S\s]*?$)/i, '/'), lines = PLAYER.listStr.split(/[\r\n]+/), resolution = '', bind_width = 0, max_bind_width = 0;
		PLAYER.list.push(max_li);
		for(var i = 0; i < lines.length; i++){
			var line = lines[i];
			if(line.match(/^#EXT-X-STREAM-INF/i)){
				line.replace(/BANDWIDTH=(\d+)/i, function(a, b){
					bind_width = parseInt(b);
				}).replace(/RESOLUTION=([^\r\n$]*)/i, function(a, b){
					resolution = b;
				})
			}
			if(line.match(/\.m3u8/i)){
				var li = {src : line.match(/^https?\:/i) ? line : path + line, quality : '' + bind_width, resolution : resolution};
				if(bind_width > max_bind_width) {
					max_bind_width = bind_width;
					max_li  = li;
				}
				PLAYER.list.push(li);
				bind_width = 0;
				resolution = '';
			}
		}
		if(PLAYER.qualityHi){
			PLAYER.src = max_li.src;
			PLAYER.ele.quality.html(_getQualityText(max_li, 0));
			_loadAndPlay(PLAYER);
		}else PLAYER.ele.quality.html(quality[0]);
		_trigger(PLAYER, 'list');
	}, _landscape = function(PLAYER, landscape){
		if(landscape){
			PLAYER.videoWidth  = $body.height();
			PLAYER.videoHeight = $body.width();
			PLAYER.ele.wrap.css({width:PLAYER.videoWidth,height:PLAYER.videoHeight});
			PLAYER.ele.media.attr({'x5-video-orientation':'landscape'});
		}else{
			PLAYER.ele.wrap.css({width:'100%',height:'100%'});
			PLAYER.ele.media.attr({'x5-video-orientation':'landscape|portrait'});
		}
	}, _fullscreen = function(PLAYER){
		if(PLAYER.canFull == 0) return ;
		var time = (new Date()).getTime();
		if(time - PLAYER.fullTime < 300) return ;
		PLAYER.fullTime = time;
		if(PLAYER.isFull == 0){
			PLAYER.isFull = 1;
			_toggleClass(PLAYER.ele.screen, 'screen-full', 1);
			_toggleClass(PLAYER.ele.fullscreen, 'fullscreen-exit', 1);
			_toggleClass($body, 'full-body', 1);
		}else{
			PLAYER.isFull = 0;
			_toggleClass(PLAYER.ele.screen, 'screen-full');
			_toggleClass(PLAYER.ele.fullscreen, 'fullscreen-exit');
			_toggleClass($body, 'full-body');
		}
		_size(PLAYER);
		if(PLAYER.landscape && 'orientation' in window){
			if(PLAYER.isFull){
				if(Math.abs(window.orientation)%180 == 0){
					_landscape(PLAYER, 1);
				}else _landscape(PLAYER);
				_toggleClass(PLAYER.ele.screen, 'landscape', 1);
			}else{
				_landscape(PLAYER);
				_toggleClass(PLAYER.ele.screen, 'landscape', 0);
			}
		}
		if(!isTouch && fjsenPlayerSeeting.fullPage) _pcFullscreen(PLAYER.isFull);
	}, _pcFullscreen = function(isFull){
		var ele, fullscreen;
		if(isFull){
			ele = $body[0];
			fullscreen = ele.requestFullscreen || ele.webkitRequestFullscreen ||ele.mozRequestFullScreen || ele.msRequestFullscreen;
		}else{
			ele = document;
			fullscreen = ele.exitFullscreen || ele.webkitExitFullscreen || ele.mozCancelFullScreen || ele.msExitFullscreen;
		}
		if(fullscreen) fullscreen.call(ele);
	}, _size = function(PLAYER){
		if(PLAYER.isFull == 0){
			PLAYER.videoWidth  = PLAYER.width;
			PLAYER.videoHeight = PLAYER.height;
			PLAYER.fullWidth   = PLAYER.eleWidth;
		}else{
			PLAYER.videoWidth  = '100%';
			PLAYER.videoHeight = '100%';
			PLAYER.fullWidth   = $body.width();
		}
		if(PLAYER.videoWidth == 0 || PLAYER.videoWidth == '0') PLAYER.videoWidth  = '100%';
		if((PLAYER.videoHeight == 0 || PLAYER.videoHeight == '0') && (PLAYER.scale == 0 || PLAYER.scale == '0')) PLAYER.scale  = 16/9;
		
		if(typeof PLAYER.videoWidth == 'string'){
			if(PLAYER.videoWidth.indexOf('%') > -1) PLAYER.videoWidth = parseInt(PLAYER.videoWidth) * 0.01 * PLAYER.fullWidth;
			else PLAYER.videoWidth = parseInt(PLAYER.videoWidth);
		}
		if(PLAYER.scale > 0) PLAYER.videoHeight = PLAYER.videoWidth / PLAYER.scale;
		if(PLAYER.isFull == 0) PLAYER.ele.wrap.css({width : PLAYER.videoWidth, height : PLAYER.videoHeight});
		else PLAYER.ele.wrap.css({width : '100%', height : '100%'});
		_trigger(PLAYER, 'size');
	}, _player = function(PLAYER){
		_trigger(PLAYER, 'poster');
		if(!isWX && (PLAYER.preload || PLAYER.auto)) _preload(PLAYER);
	}, _weixinAutoPlay = function(){
		for(var i = 0; i < list.length; i++){
			var PLAYER = list[i];
			if(PLAYER.preload || PLAYER.auto || fjsenPlayerSeeting.loop == 2){
				_preload(PLAYER);
				_trigger(PLAYER, 'weixin-auto');
			}
		}
	}, _httpsSrc = function(src){
		if(location.protocol == 'https:'){
			src = src.replace(/^http?\:/i, 'https:');
		}
		return src;
	}, _getVid = function(PLAYER){
		var src = 'https://mediaadmin.fjsen.com/Api/video/' + PLAYER.src + '.html?callback=?';
		_ajax(src, 'json', true, false, function(json){
			if(json.code == 1){
				_trigger(PLAYER, 'get-vid-error');
				_trigger(PLAYER, 'error');
				return ;
			}
			PLAYER.src    = _httpsSrc(json.data.src);
			if(json.data.poster != '' && PLAYER.poster == '') PLAYER.poster = _httpsSrc(json.data.poster);
			_trigger(PLAYER, 'get-vid');
			_add(PLAYER, 1);
		}, function(){
			_trigger(PLAYER, 'get-vid-error');
			_trigger(PLAYER, 'error');
		})
	}, _getFlash = function(PLAYER){
		PLAYER.type = 'flash';
		_flash(PLAYER);
	}, _getHls = function(PLAYER){
		if(hls){
			if(hls == 3) _getFlash(PLAYER);
			else _getVideo(PLAYER);
		}else _ajax(fjsenPlayerSeeting.path + hlsJs, 'script', true, false, function(){
			_trigger(PLAYER, 'get-hls');
			if(Hls && Hls.isSupported()){
				hls = 1
				_getVideo(PLAYER);
			}else{
				if(_testVideo(mime.m3u8)){
					hls = 2
					_getVideo(PLAYER);
				}else{
					hls = 3;
					_getFlash(PLAYER);
				}
			}
		})
	}, _getVideo = function(PLAYER){
		PLAYER.type = (hls == 1 && PLAYER.mime == mime.m3u8) ? 'hls' : 'video';
		_player(PLAYER);
	}, _getIframe = function(PLAYER){
		PLAYER.type = 'iframe';
		_trigger(PLAYER, 'iframe');
	}, _testVideo = function(mime){
		var video = (_ele('video'))[0];
		return video && video.canPlayType && video.canPlayType(mime);
	}, _add = function(PLAYER, last){
		_bindEvent(PLAYER);
		if(!last && PLAYER.src.match(/^\w{32}$/i)) _getVid(PLAYER);
		else{
			index++;
			PLAYER.id = 'FjsenPlayer_' + index;
			_trigger(PLAYER, 'add');
			_create(PLAYER);
			PLAYER.src = _httpsSrc(PLAYER.src);
			if(PLAYER.src.match(/\.flv($|\?)/i)){
				PLAYER.mime = mime.flv;
				_getFlash(PLAYER);
			}else if(PLAYER.src.match(/\.mp3($|\?)/i)){
				PLAYER.mime = mime.mp3;
				if(_testVideo(PLAYER.mime)) _getVideo(PLAYER);
				else _getFlash(PLAYER);
			}else if(PLAYER.src.match(/\.mp4($|\?)/i)){
				PLAYER.mime = mime.mp4;
				if(_testVideo(PLAYER.mime)) _getVideo(PLAYER);
				else _getFlash(PLAYER);
			}else if(PLAYER.src.match(/\.m3u8($|\?)/i)){
				PLAYER.mime = mime.m3u8;
				if(isIE) _getFlash(PLAYER);
				else if(isX5 && PLAYER.live) _getVideo(PLAYER);
				else _getHls(PLAYER);
			}else _getIframe(PLAYER);
		}
	}, _FjsenPlayer = function(ele, pp){
		if(typeof ele == 'string') ele = $(ele);
		var _data = ele.attr('player-data');
		if(_data && _data.match(/^\{[\S\s]+\}$/)){
			try{eval('_data = ' + _data);}catch(e){_data = {};}
		}else _data = {};
		var PLAYER = $.extend(true, {}, data, _data, pp);
		
		
		if(!PLAYER.src || PLAYER.src == '') return _log('无播放地址');
		PLAYER.ele.ele  = ele;
		PLAYER.eleWidth = ele.width();
		PLAYER._call = function(funName, args){
			eval(funName+'(PLAYER, args)');
		}
		ele.on('resize', function(){
			var width = $(this).width();
			if(width > 0 && width != PLAYER.eleWidth){
				PLAYER.eleWidth = width;
				_size(PLAYER);
			}
		})
		list.push(PLAYER);
		_add(PLAYER);
		window.lastPLAYER = PLAYER;
		return PLAYER;
	}, _setVolume = function(PLAYER, volume){
		if(PLAYER.loaded){
			var oldVolume = PLAYER.media.volume;
			if(oldVolume > 0) PLAYER.oldVolume = oldVolume;
			if(volume == -1) volume = oldVolume == 0 ? PLAYER.oldVolume : 0;
			PLAYER.media.volume = volume;
			_trigger(PLAYER, 'volume');
		}
	}, _volumeShow = function(PLAYER){
		if(PLAYER.barVTimer) clearTimeout(PLAYER.barVTimer);
		if(PLAYER.loaded){
			PLAYER.barVShow = 1;
			PLAYER.ele.volumeBar.show();
			PLAYER.ele.volumeVal.css({height : (PLAYER.media.volume * 80) + 'px'});
		}
	}, _volumeHide = function(PLAYER){
		if(PLAYER.barVTimer) clearTimeout(PLAYER.barVTimer);
		PLAYER.barVTimer = setTimeout(function(){
			if(PLAYER.barVShow && !PLAYER.inVShow){
				PLAYER.barVShow = 0;
				PLAYER.ele.volumeBar.hide();
			}
		}, 300);
	}, _qualityShow = function(PLAYER){
		if(PLAYER.barQTimer) clearTimeout(PLAYER.barQTimer);
		PLAYER.barQShow = 1;
		PLAYER.ele.qualityBar.show();
		PLAYER.barQTimer = setTimeout(function(){
			_qualityHide(PLAYER)
		}, 2000);
	}, _qualityHide = function(PLAYER, mast){
		if(PLAYER.barQTimer) clearTimeout(PLAYER.barQTimer);
		PLAYER.barQTimer = setTimeout(function(){
			if(mast || (PLAYER.barQShow && !PLAYER.inQShow)){
				PLAYER.barQShow = 0;
				PLAYER.ele.qualityBar.hide();
			}
		}, 300);
	}, _showMsg = function(PLAYER, msg, autoHide){
		_log('msg:'+msg);
		if(PLAYER.msgTimer) clearTimeout(PLAYER.msgTimer);
		PLAYER.ele.msg.html(msg).show();
		if(autoHide) PLAYER.msgTimer = setTimeout(function(){
			_hideMsg(PLAYER);
		}, 2000);
	}, _hideMsg = function(PLAYER){
		PLAYER.ele.msg.hide();
	}, _dragX = function(PLAYER, drag){
		if(PLAYER.loaded && PLAYER.duration){
			var currentTime = PLAYER.media.currentTime, proportion = currentTime / PLAYER.duration, change = drag / PLAYER.videoWidth, go = proportion + change;
			if(go < 0){
				go = 0;
				change = go - proportion;
			}else if(go > 1){
				go = 1;
				change = go - proportion;
			}
			var change_time = Math.abs(Math.round(change * PLAYER.duration));
			if(change_time > 0){
				_showMsg(PLAYER, (change > 0 ? '快进' : '后退') + ' ' + change_time + ' 秒', 1);
				return PLAYER.duration * go
			}
		}
		return -1;
	}, _dragY = function(PLAYER, drag){
		if(PLAYER.loaded){
			var volume = PLAYER.media.volume, change = drag / PLAYER.videoHeight, go = volume + change;
			if(go < 0) go = 0;
			else if(go > 1) go = 1;
			return go;
		}
		return -1;
	}, _getQualityText = function(li, resolution){
		var text = '';
		if(li.quality in quality) text = quality[li.quality];
		else{
			for(var i in quality){
				var n = parseInt(i);
				if(li.quality < n){
					break;
				}
			}
			text = quality[i];
		}
		if(resolution && li.resolution) text += '<span>(' + li.resolution + ')</span>';
		return text;
	}, _isXY = function(PLAYER){
		if((PLAYER.landscape && 'orientation' in window && PLAYER.isFull) || PLAYER.notFullLandscape){
			if(Math.abs(window.orientation)%180 == 0) return 1;
		}
		return 0;
	}, _bindEvent = function(PLAYER){
		_bind(PLAYER, 'poster', function(PLAYER){
			if(PLAYER.poster){
				PLAYER.ele.poster = _ele('img', 'poster');
				PLAYER.ele.poster.on('error', function(){
					PLAYER.poster = '';
					PLAYER.ele.poster.hide();
				})
				PLAYER.ele.poster.attr('src', PLAYER.poster);
				PLAYER.ele.video.append(PLAYER.ele.poster);
			}
		})
		_bind(PLAYER, 'play', function(PLAYER){
			if(PLAYER.ele.poster && PLAYER.mime !== mime.mp3) PLAYER.ele.poster.hide();
			PLAYER.ele.play.hide();
			_toggleClass(PLAYER.ele.playing, 'pause', 1);
			_progress(PLAYER);
			_barHide(PLAYER);
			if(PLAYER.bg == 'virtual') _canvas(PLAYER);
		})
		_bind(PLAYER, 'pause', function(PLAYER){
			PLAYER.ele.play.show();
			_barShow(PLAYER);
			_toggleClass(PLAYER.ele.playing, 'pause');
			if(PLAYER.prTimer) clearTimeout(PLAYER.prTimer);
			if(PLAYER.viTimer) clearTimeout(PLAYER.viTimer);
		})
		_bind(PLAYER, 'volume', function(PLAYER){
			var volume = PLAYER.media.volume, offClass = _class('volume-off');
			if(volume == 0) PLAYER.ele.volume.addClass(offClass);
			else PLAYER.ele.volume.removeClass(offClass);
			if(!isTouch) PLAYER.ele.volumeVal.css({height : (volume * 80) + 'px'});
			_showMsg(PLAYER, '音量 ' + Math.round(volume * 100) + '%', 1);
		})
		if(PLAYER.windDrag == 1){
			_bind(PLAYER, 'wind-drag-x', function(PLAYER, drag){
				if(_isXY(PLAYER)){
					var go = _dragY(PLAYER, drag.end.x - drag.start.x);
					if(go > -1) _setVolume(PLAYER, go);
				}else{
					var go = _dragX(PLAYER, drag.end.x - drag.start.x);
					if(go > -1) _setTime(PLAYER, go);
				}
			})
			_bind(PLAYER, 'wind-move-x', function(PLAYER, drag){
				if(_isXY(PLAYER)){
					var go = _dragY(PLAYER, drag.start.x - drag.move.x);
					if(go > -1){
						_showMsg(PLAYER, '音量 ' + Math.round(go * 100) + '%', 1);
					}
				}else{
					_dragX(PLAYER, drag.move.x - drag.start.x);
				}
			})
			_bind(PLAYER, 'wind-drag-y', function(PLAYER, drag){
				if(_isXY(PLAYER)){
					var go = _dragX(PLAYER, drag.start.y - drag.end.y);
					if(go > -1) _setTime(PLAYER, go);
				}else{
					var go = _dragY(PLAYER, drag.start.y - drag.end.y);
					if(go > -1) _setVolume(PLAYER, go);
				}
			})
			_bind(PLAYER, 'wind-move-y', function(PLAYER, drag){
				if(_isXY(PLAYER)){
					_dragX(PLAYER, drag.move.y - drag.start.y);
				}else{
					var go = _dragY(PLAYER, drag.start.y - drag.move.y);
					if(go > -1){
						_showMsg(PLAYER, '音量 ' + Math.round(go * 100) + '%', 1);
					}
				}
			})			
		}
		_bind(PLAYER, 'wind-click', function(PLAYER){
			if(isTouch && PLAYER.ele.barBg.is(':hidden')){
				_barShow(PLAYER);
				_barHide(PLAYER);
			}else _toggle(PLAYER);
		})
		_bind(PLAYER, 'wind-dblclick', function(PLAYER){
			_fullscreen(PLAYER);
		})
		_bind(PLAYER, 'wind-contextmenu', function(PLAYER, drag){
			PLAYER.ele.menu.css({top:drag.start.y, left:drag.start.x}).show();
		})
		_bind(PLAYER, 'wrap-mouseover', function(PLAYER){
			_toggleClass(PLAYER.ele.play, 'play-hover', 1);
			_barShow(PLAYER);
		})
		_bind(PLAYER, 'wrap-mouseout', function(PLAYER){
			_toggleClass(PLAYER.ele.play, 'play-hover');
			_barHide(PLAYER);
		})
		_bind(PLAYER, 'wrap-click', function(PLAYER){
			PLAYER.ele.menu.hide();
		})
		_bind(PLAYER, 'playing-click', function(PLAYER){
			_toggle(PLAYER);
		})
		_bind(PLAYER, 'volume-click', function(PLAYER){
			_setVolume(PLAYER, -1);
		})
		_bind(PLAYER, 'fullscreen-click', function(PLAYER){
			_fullscreen(PLAYER);
		})
		_bind(PLAYER, 'volume-mouseover', function(PLAYER){
			PLAYER.inVShow = 0;
			_volumeShow(PLAYER);
		})
		_bind(PLAYER, 'volume-mouseout', function(PLAYER){
			PLAYER.inVShow = 0;
			_volumeHide(PLAYER);
		})
		_bind(PLAYER, 'volumeTmd-mouseover', function(PLAYER, drag){
			PLAYER.inVShow = 1;
		})
		_bind(PLAYER, 'volumeTmd-click', function(PLAYER, drag){
			var volume = (90 - drag.end.y) / 80;
			if(volume > 1) volume = 1;
			else if(volume < 0) volume = 0;
			_setVolume(PLAYER, volume);
		})
		_bind(PLAYER, 'volumeTmd-mouseout', function(PLAYER){
			PLAYER.inVShow = 0;
			_volumeHide(PLAYER);
		})
		_bind(PLAYER, 'prBar-mouseover', function(PLAYER, drag){
			if(PLAYER.loaded){
				_barGoto(PLAYER, drag.start);
				PLAYER.ele.prGoto.show();
				PLAYER.ele.prDian.show();
			}
		})
		_bind(PLAYER, 'prBar-mousemove', function(PLAYER, drag){
			if(PLAYER.loaded) _barGoto(PLAYER, drag.move);
		})
		_bind(PLAYER, 'prBar-click', function(PLAYER, drag){
			if(PLAYER.duration){
				var go = drag.end.x / PLAYER.videoWidth;
				_setTime(PLAYER, PLAYER.duration * go);
			}
		})
		_bind(PLAYER, 'prBar-mouseout', function(PLAYER){
			PLAYER.ele.prGoto.hide();
			PLAYER.ele.prDian.hide();
		})
		_bind(PLAYER, 'canvas', function(PLAYER){
			try{
				if(PLAYER.bg == 'virtual' && PLAYER.mime !== mime.mp3){
					var w = PLAYER.media.videoWidth, h = PLAYER.media.videoHeight;
					if(!PLAYER.context && w > 0 && h > 0){
						PLAYER.ele.canvas.attr({width : w * PLAYER.virtual, height : h * PLAYER.virtual});
						PLAYER.context = PLAYER.ele.canvas[0].getContext('2d');
					}
					if(PLAYER.context) PLAYER.context.drawImage(PLAYER.media, 0, 0);
				}
			}catch(e){}
		})
		_bind(PLAYER, 'progress', function(PLAYER){
			if(PLAYER.duration){
				PLAYER.ele.prPlay.css({width : ((PLAYER.currentTime / PLAYER.duration) * 100) + '%'});
				PLAYER.ele.maxTime.html(_timeStr(PLAYER.duration));
			}
			PLAYER.ele.playTime.html(_timeStr(PLAYER.currentTime));
		})
		_bind(PLAYER, 'list', function(PLAYER){
			if(PLAYER.quality && PLAYER.list.length > 1){
				PLAYER.ele.quality.show();
				for(var i = 0; i < PLAYER.list.length; i++){
					var li = PLAYER.list[i], qli = _ele('div', 'quality-li');
					qli.data('quality', li);
					qli.html(_getQualityText(li, 1));
					PLAYER.ele.qualityBar.append(qli);
				}
			}
		})
		_bind(PLAYER, 'quality-click', function(PLAYER){
			PLAYER.inQShow = 0;
			if(PLAYER.barQShow) _qualityHide(PLAYER);
			else _qualityShow(PLAYER);
		})
		_bind(PLAYER, 'quality-mouseover', function(PLAYER){
			PLAYER.inQShow = 0;
			_qualityShow(PLAYER);
		})
		_bind(PLAYER, 'quality-mouseout', function(PLAYER){
			PLAYER.inQShow = 0;
			_qualityHide(PLAYER);
		})
		_bind(PLAYER, 'qualityBar-mouseover', function(PLAYER, drag){
			PLAYER.inQShow = 1;
		})
		_bind(PLAYER, 'qualityBar-mouseout', function(PLAYER){
			PLAYER.inQShow = 0;
			_qualityHide(PLAYER);
		})
		_bind(PLAYER, 'qualityBar-click', function(PLAYER){
			var li = PLAYER.event_ele, liQuality = li.data('quality');
			PLAYER.lastQualityBarLi = li;
			_qualityHide(PLAYER, 1);
			_loadQuality(PLAYER, liQuality);
		})
		_bind(PLAYER, 'menuBar-click', function(PLAYER){
			PLAYER.ele.menu.hide();
			var li = PLAYER.event_ele, contextmenu = li.data('contextmenu');
			if(contextmenu && contextmenu.length > 0 && contextmenu.indexOf(':') > -1){
				var arr = contextmenu.split(':');
				if(arr[0] == 'objectFit' && PLAYER.ele.media){
					PLAYER.objectFit = arr[1];
					PLAYER.ele.media.css({objectFit : PLAYER.objectFit});
				}
			}
		})
		_bind(PLAYER, 'iframe', function(PLAYER){
			PLAYER.ele.wrap = _ele('iframe');
			PLAYER.ele.wrap.attr({
				src : PLAYER.src
				, frameborder : 0
				, scrolling : (PLAYER.scrolling || 'no')
			});
			PLAYER.ele.ele.html(PLAYER.ele.wrap).css({position:'static'});
			_size(PLAYER);
		})
		_bind(PLAYER, 'error', function(PLAYER){
			if(PLAYER.poster && PLAYER.ele.poster) PLAYER.ele.poster.show();
			_showMsg(PLAYER, PLAYER.error);
		})
	}, _lowList = function(PLAYER){
		var lis = PLAYER.ele.qualityBar.children(), len = lis.length;
		if(len > 1){
			if(!PLAYER.lastQualityBarLi){
				PLAYER.lastQualityBarLi = lis.eq(0);
			}
			PLAYER.event_ele = PLAYER.lastQualityBarLi;
			_trigger(PLAYER, 'qualityBar-click');
		}
		_log('lowList');
	}, _loadQuality = function(PLAYER, li){
		PLAYER.src = li.src;
		PLAYER.ele.quality.html(_getQualityText(li, 0));
		_showMsg(PLAYER, '正在切换画质', 1);
		var old = PLAYER.currentTime;
		_load(PLAYER, function(PLAYER){
			if(!PLAYER.live && old > 0) _setTime(PLAYER, old);
			if(PLAYER.playing) _play(PLAYER);
		});
	}, _barVolumeGoto = function(PLAYER, txy){
		var go = (90 - txy.y) / 80;
		if(go > 1) go = 1;
		else if(go < 0) go = 0;
		PLAYER.ele.volumeVal.css({height : (go * 80) + 'px'});
	}, _barGoto = function(PLAYER, txy){
		if(PLAYER.duration){
			var go = txy.x / PLAYER.videoWidth;
			if(go > 1) go = 1;
			else if(go < 0) go = 0;
			PLAYER.ele.prGoto.css({width : (go * 100) + '%'});
			PLAYER.ele.prTime.html(_timeStr(PLAYER.duration * go));
		}
	}, _barShow = function(PLAYER){
		if(PLAYER.barTimer) clearTimeout(PLAYER.barTimer);
		if(PLAYER.videoControls == 0 && PLAYER.controls){
			PLAYER.ele.barBg.show();
			PLAYER.ele.bar.show();
			if(!PLAYER.live){
				PLAYER.ele.prBg.show();
				PLAYER.ele.prLoad.show();
				PLAYER.ele.prPlay.show();
				PLAYER.ele.prBar.show();
			}
		}
	}, _barHide = function(PLAYER){
		if(PLAYER.barTimer) clearTimeout(PLAYER.barTimer);
		PLAYER.barTimer = setTimeout(function(){
			if(PLAYER.playing){
				PLAYER.ele.barBg.hide();
				PLAYER.ele.bar.hide();
				if(!PLAYER.live){
					PLAYER.ele.prBg.hide();
					PLAYER.ele.prLoad.hide();
					PLAYER.ele.prPlay.hide();
					PLAYER.ele.prBar.hide();	
					PLAYER.ele.prGoto.hide();
				}
			}
		}, PLAYER.barHide);
	}
	window.fjsenPlayer = _FjsenPlayer;
	_init();
})()