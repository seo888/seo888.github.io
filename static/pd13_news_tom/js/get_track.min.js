var _hmt = _hmt || [];
(function() {
    var hm = document.createElement('script');
    hm.src = 'https://hm.baidu.com/hm.js?10e90f775ae213da8394c37d17b9c87d';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(hm, s)
})();
var _paq = _paq || [];
_paq.push(['trackPageView']);
_paq.push(['enableLinkTracking']);
(function() {
    var u = '//tongji.tom.com/';
    _paq.push(['setTrackerUrl', u + 'matomo.php']);
    _paq.push(['setSiteId', '30']);
    var g = document.createElement('script'),
        s = document.getElementsByTagName('script')[0];
    g.type = 'text/javascript';
    g.async = true;
    g.defer = true;
    g.src = u + 'matomo.js';
    s.parentNode.insertBefore(g, s)
})();
var _hmtb = _hmtb || [];

function getCookie(key) {
    var arr, reg = new RegExp('(^| )' + key + '=([^;]*)(;|$)');
    if ((arr = document.cookie.match(reg))) {
        return decodeURI(arr[2])
    } else {
        return null
    }
}

function ajaxData(obj) {
    let method = obj.method == undefined ? 'GET' : obj.method;
    let data = obj.data == undefined ? {} : obj.data;
    const httpRequest = new XMLHttpRequest();
    if (!obj.url) return;
    var paramsString = '';
    var isGet = /get/i.test(obj.method);
    for (let propName in data) {
        paramsString += propName + '=' + data[propName] + '&'
    }
    obj.url = isGet ? obj.url + '?' + paramsString.slice(0, paramsString.length - 1) : obj.url;
    httpRequest.open(method.toLowerCase(), obj.url, true);
    !isGet && httpRequest.setRequestHeader('content-type', 'application/x-www-form-urlencoded');
    obj.header && httpRequest.setRequestHeader(obj.header[0], obj.header[1]);
    if (isGet) {
        httpRequest.send()
    } else {
        httpRequest.send(paramsString.substring(0, paramsString.length - 1))
    }
    httpRequest.onreadystatechange = function() {
        if (httpRequest.readyState == 4 && httpRequest.status == 200) {
            var json = httpRequest.responseText;
            json && obj.success && obj.success(JSON.parse(json))
        } else {
            obj.error && obj.error()
        }
    }
}

function getUuid() {
    var s = [];
    var hexDigits = '0123456789abcdef';
    for (var i = 0; i < 36; i++) {
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1)
    }
    s[14] = '4';
    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
    s[8] = s[13] = s[18] = s[23] = '-';
    var uuid = s.join('');
    return uuid
}
let uuid = getUuid();

function getOpenRecord() {
    try {
        ajaxData({
            url: 'https://track.tom.com/verification',
            method: 'post',
            data: {
                flag: 0,
                deviceId: getCookie('device_id') || 'deviceId',
                adid: uuid,
                currentUrl: window.location.href,
                clientTimestamp: Date.now(),
            },
            success: function(res) {
                console.log(res)
            },
            error: function(err) {
                console.log(err)
            },
        })
    } catch (error) {
        console.log(error)
    }
}
var user_id = '',
    device_id = '',
    article_id = '',
    app_key = '';

    var t_article_time='';
var t_article_type='';
(function foo() {
    app_key = 'tom_iweb';
    var deviceIdName = 'device_id=';
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i].trim();
        if (c.indexOf(deviceIdName) == 0) {
            device_id = c.substring(deviceIdName.length, c.length);
            break
        }
    }
})();
(function() {
    var track = document.createElement('script');
    track.src = '//track.tom.com/track.min.js';
    var su = document.getElementsByTagName('script')[0];
    su.parentNode.insertBefore(track, su)
})();
window.send_tracker_event = function(track_event, category, action, name, value) {
    try {
        _hmt.push(['_trackEvent', category, action, name, value])
    } catch (error) {}
    try {
        _paq.push(['trackEvent', category, action, name, value])
    } catch (error) {}
    try {
        new TrackEvent().setEvent(track_event, action, name, value, category)
    } catch (error) {}
};