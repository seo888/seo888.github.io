// Generated by CoffeeScript 1.6.2
(function() {
  var CommentPostShare,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.CommentPost = (function() {
    var getAnonymous, getSeccode, initialize, options, postComment, upateState,
      _this = this;

    CommentPost.isInitialize = false;

    options = null;

    initialize = function(callback) {
      var loadDialog, loadLoginForm;

      if (CommentPost.isInitialize) {
        return callback();
      }
      if (typeof $.getCSS !== 'function') {
        $.getCSS = function(url) {
          var cssElement;

          cssElement = $('<link />').attr({
            href: url,
            type: 'text/css',
            rel: 'stylesheet'
          });
          return cssElement.appendTo('head');
        };
      }
      loadDialog = function(callback) {
        if (typeof window.dialog !== 'undefined') {
          return callback();
        }
        $.getCSS("" + IMG_URL + "js/lib/dialog/style.css");
        return $.getScript("" + IMG_URL + "js/lib/cmstop.dialog.js", callback);
      };
      loadLoginForm = function(callback) {
        if (typeof LoginForm !== 'undefined') {
          return callback();
        }
        return $.getScript("" + IMG_URL + "apps/member/js/loginform.js", callback);
      };
      loadDialog(function() {
        return loadLoginForm(callback);
      });
      return CommentPost.isInitialize = true;
    };

    postComment = function(form) {
      var content, submitUrl;

      content = form.content.value;
      if (content.length === 0) {
        alert('评论内容不能为空');
        return false;
      }
      if (typeof window.postingComment !== 'undefined' && window.postingComment) {
        return false;
      }
      form.topicid.value = options.topicid;
      if (APP_URL.search(location.host) < 1) {
        return true;
      }
      window.postingComment = true;
      form = $(form);
      submitUrl = form.attr('action');
      $.post(submitUrl, form.serialize(), function(res) {
        var e;

        if (res.state) {
          if (typeof comment !== 'undefined' && typeof comment.page !== 'undefined') {
            comment.page(topicid, page, pagesize);
          }
          alert(options.isCheck ? '评论发表成功，请等待审核！' : '评论发表成功!');
          form[0].reset();
          try {
            replyDialog.close();
          } catch (_error) {
            e = _error;
          }
        } else {
          alert(res.error || '评论失败');
        }
        if ($('.seccode_image').length > 0) {
          $('.seccode_image').click();
        }
        return window.postingComment = false;
      }, 'json');
      return false;
    };

    getSeccode = function() {
      var seccodeImage, span;

      if (!options.isSeccode) {
        return '';
      }
      span = $('<span class="seccode"></span>').css({
        float: 'left'
      });
      $('<label for="seccode">验证码： </label>').appendTo(span);
      $('<input type="text" />').appendTo(span).attr({
        name: 'seccode',
        id: 'seccode',
        size: 4,
        maxlength: 4
      }).css({
        'ime-mode': 'disabled',
        'width': '30px'
      });
      seccodeImage = $('<img class="seccode_image" />').appendTo(span).attr({
        src: "",
        alt: '验证码,看不清楚?请点击刷新验证码',
        align: 'absmiddle'
      }).css({
        cursor: 'pointer'
      });
      seccodeImage.bind('click', function() {
        return $('.seccode_image').attr('src', "" + APP_URL + "?app=system&controller=seccode&action=image&=" + (Math.random() * 5));
      });
      seccodeImage.bind('load', function() {
        return $(this).parent('span').slideDown('fast');
      });
      seccodeImage.click();
      return span;
    };

    getAnonymous = function() {
      var labelElement;

      labelElement = $('<label>匿名发表</label>').addClass('label-anonymous');
      $('<input type="checkbox" />').prependTo(labelElement).attr({
        name: 'anonymous',
        value: '1'
      }).css({
        'vertical-align': 'middle'
      });
      return labelElement;
    };

    upateState = function() {
      options.form.find(options.loginSelector).unbind().bind('click', function() {
        return window.loginForm.login();
      });
      return options.form.find(options.logoutSelector).unbind().bind('click', function() {
        return window.loginForm.logout();
      });
    };

    CommentPost.prototype.login = function(username) {
      var span, template;

      if (username == null) {
        username = '';
      }
      template = $(options.afterLoginTemplate);
      template.find('em').html(username);
      template.find('.anonymous').append(getAnonymous());
      span = getSeccode();
      template.find('.seccode-area').append(span);
      options.userInfoPanel.empty().append(template).show();
      options.warningPanel.hide();
      return upateState();
    };

    CommentPost.prototype.logout = function() {
      var span, template;

      if (options.isLogin) {
        options.userInfoPanel.hide();
        options.warningPanel.show();
      } else {
        template = $(options.beforeLoginTemplate);
        span = getSeccode();
        template.find('.seccode-area').append(span);
        options.warningPanel.hide();
        options.userInfoPanel.empty().append(template).show();
      }
      return upateState();
    };

    function CommentPost(_options) {
      this.logout = __bind(this.logout, this);
      this.login = __bind(this.login, this);
      var textarea,
        _this = this;

      options = _options;
      initialize(function() {
        var postShare, _ref;

        if ((_ref = window.loginForm) == null) {
          window.loginForm = new LoginForm();
        }
        window.loginForm.addTrigger(_this);
        window.loginForm.update();
        postShare = new CommentPostShare();
        options.form.bind('submit', function() {
          return postComment(this);
        });
        return upateState();
      });
      textarea = options.form.find('textarea');
      textarea.one('click', function() {
        var seccode;

        seccode = $(this).parent().next().find('.seccode-area');
        seccode.css('visibility', 'visible');
        return seccode.find('img').click();
      });
    }

    return CommentPost;

  }).call(this);

  CommentPostShare = (function() {
    var alertDialog, authWindow, authorize, authorizeError, authorizeSuccess, bind, build, changeAuthorized, load, selectedShareIco, unselectedShareIco,
      _this = this;

    alertDialog = authWindow = null;

    function CommentPostShare() {
      var _this = this;

      if (document.readyState === 'loading') {
        $(function() {
          return load();
        });
      } else {
        load();
      }
    }

    load = function() {
      var url;

      url = "" + APP_URL + "?app=comment&controller=review&action=ajax_allow_weibo&jsoncallback=?";
      return $.getJSON(url, function(res) {
        var panel;

        if (!(res && res.length)) {
          return;
        }
        panel = $('.loginform-user-info').find('.share-area');
        return $.each(res, function(i, k) {
          return build(k, panel);
        });
      });
    };

    build = function(data, panel) {
      var html, ico;

      ico = data.is_authorized ? data.icon : data.icon_gray;
      html = $(new Array('<label>' + '<div class="repost-btn">' + '<img src="' + ico + '" alt="' + data["interface"] + '" title="转发到' + data.name + '" />' + '<div class="tick"></div>' + '</div>' + '<input type="checkbox" name="share_weibo[]" value="' + data.apiid + '" style="visibility:hidden;" />' + '</label>').join(''));
      panel.append(html);
      html.find('.repost-btn').bind('click', {
        item: data
      }, function(event) {
        var element;

        if (event.data.item.is_authorized) {
          return bind(this, event);
        } else {
          element = $(this);
          element.bind('changeAuthorized', {
            ico: event.data.item.icon
          }, changeAuthorized);
          return authorize(event.data.item["interface"], element);
        }
      });
      if (data.is_authorized) {
        return setTimeout(function() {
          return html.find('.repost-btn').click();
        }, 10);
      }
    };

    authorize = function(type, element) {
      var p, params, url;

      url = "" + APP_URL + "?app=cloud&controller=thirdlogin&action=redirect_to_authorize&type=" + type;
      params = 'width=640,height=480,location=no,menubar=no,scrollbars=yes';
      authWindow = window.open(url, void 0, params);
      return p = setInterval(function() {
        var authsuccess;

        if (!authWindow.closed) {
          return;
        }
        authsuccess = $.cookie(COOKIE_PRE + 'authsuccess');
        if (authsuccess === '0') {
          $.cookie(COOKIE_PRE + 'authsuccess', null, {
            domain: COOKIE_DOMAIN
          });
          authorizeSuccess(element);
        } else {
          if (typeof authsuccess === 'string') {
            authorizeError(authsuccess);
          }
        }
        return clearInterval(p);
      }, 1000);
    };

    authorizeSuccess = function(element) {
      return element.trigger('changeAuthorized');
    };

    authorizeError = function(message) {
      if (!alertDialog) {
        alertDialog = new window.dialog({
          hasOverlay: 1,
          width: 180,
          height: 28,
          hasCloseIco: 0,
          closeDelay: 3000
        });
      }
      return alertDialog.open({
        text: message
      });
    };

    changeAuthorized = function(event) {
      var element;

      element = $(this);
      element.find('img').attr('src', event.data.ico);
      element.unbind().bind('click', function(event) {
        return bind(this, event);
      });
      return setTimeout(function() {
        return element.find('.repost-btn').click();
      }, 10);
    };

    bind = function(element, event) {
      var checkbox;

      element = $(element);
      checkbox = element.next('input[type="checkbox"]');
      if (checkbox.is(':checked')) {
        unselectedShareIco(element);
      } else {
        selectedShareIco(element);
      }
      checkbox[0].checked = !checkbox.is(':checked');
      return event.preventDefault();
    };

    selectedShareIco = function(element) {
      return element.addClass('repost-btn-checked').removeClass('repost-btn');
    };

    unselectedShareIco = function(element) {
      return element.addClass('repost-btn').removeClass('repost-btn-checked');
    };

    return CommentPostShare;

  }).call(this);

}).call(this);
